{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\melkote\\\\Desktop\\\\ActuallyAlmostFinalizedWaite-main1\\\\ActuallyAlmostFinalizedWaite-main\\\\client\\\\src\\\\pages\\\\FunActivitiesLanding.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './FunActivitiesLanding.css';\nimport Navbar from '../components/Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = [{\n  value: 'outdoor',\n  label: 'Outdoor Activities'\n}, {\n  value: 'indoor',\n  label: 'Indoor Activities'\n}, {\n  value: 'restaurants',\n  label: 'Restaurants'\n}, {\n  value: 'entertainment',\n  label: 'Entertainment'\n}];\nexport default function FunActivitiesLanding() {\n  _s();\n  const navigate = useNavigate();\n  const [selectedOption, setSelectedOption] = useState('');\n  const [spinning, setSpinning] = useState(false);\n  const handleSpin = () => {\n    if (spinning) return;\n    setSpinning(true);\n    let currentIndex = 0;\n    // Cycle through the options every 100ms\n    const interval = setInterval(() => {\n      currentIndex = (currentIndex + 1) % options.length;\n      setSelectedOption(options[currentIndex].label);\n    }, 100);\n\n    // Stop after 2 seconds and choose a random option\n    setTimeout(() => {\n      clearInterval(interval);\n      const randomIndex = Math.floor(Math.random() * options.length);\n      setSelectedOption(options[randomIndex].label);\n      setSpinning(false);\n      // After a short delay, navigate to the results page with the selected option\n      setTimeout(() => {\n        navigate(`/fun-activities/results?category=${options[randomIndex].value}`);\n      }, 500);\n    }, 2000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"landing-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      onSignOut: () => {\n        localStorage.removeItem('bacshotsUser');\n        navigate('/signin');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"landing-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"What are you interested in?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `slot-machine ${spinning ? 'spinning' : ''}`,\n        onClick: handleSpin,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"slot-text\",\n          children: selectedOption || 'Click to Spin'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(FunActivitiesLanding, \"nz8cms8C5r6RpZ+bvsdsaKZ8Ud8=\", false, function () {\n  return [useNavigate];\n});\n_c = FunActivitiesLanding;\nvar _c;\n$RefreshReg$(_c, \"FunActivitiesLanding\");","map":{"version":3,"names":["React","useState","useNavigate","Navbar","jsxDEV","_jsxDEV","options","value","label","FunActivitiesLanding","_s","navigate","selectedOption","setSelectedOption","spinning","setSpinning","handleSpin","currentIndex","interval","setInterval","length","setTimeout","clearInterval","randomIndex","Math","floor","random","className","children","onSignOut","localStorage","removeItem","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/melkote/Desktop/ActuallyAlmostFinalizedWaite-main1/ActuallyAlmostFinalizedWaite-main/client/src/pages/FunActivitiesLanding.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './FunActivitiesLanding.css';\nimport Navbar from '../components/Navbar';\n\nconst options = [\n  { value: 'outdoor', label: 'Outdoor Activities' },\n  { value: 'indoor', label: 'Indoor Activities' },\n  { value: 'restaurants', label: 'Restaurants' },\n  { value: 'entertainment', label: 'Entertainment' },\n];\n\nexport default function FunActivitiesLanding() {\n  const navigate = useNavigate();\n  const [selectedOption, setSelectedOption] = useState('');\n  const [spinning, setSpinning] = useState(false);\n\n  const handleSpin = () => {\n    if (spinning) return;\n    setSpinning(true);\n    let currentIndex = 0;\n    // Cycle through the options every 100ms\n    const interval = setInterval(() => {\n      currentIndex = (currentIndex + 1) % options.length;\n      setSelectedOption(options[currentIndex].label);\n    }, 100);\n\n    // Stop after 2 seconds and choose a random option\n    setTimeout(() => {\n      clearInterval(interval);\n      const randomIndex = Math.floor(Math.random() * options.length);\n      setSelectedOption(options[randomIndex].label);\n      setSpinning(false);\n      // After a short delay, navigate to the results page with the selected option\n      setTimeout(() => {\n        navigate(`/fun-activities/results?category=${options[randomIndex].value}`);\n      }, 500);\n    }, 2000);\n  };\n\n  return (\n    <div className=\"landing-container\">\n      <Navbar onSignOut={() => {\n        localStorage.removeItem('bacshotsUser');\n        navigate('/signin');\n      }} />\n      <div className=\"landing-content\">\n        <h1>What are you interested in?</h1>\n        <div className={`slot-machine ${spinning ? 'spinning' : ''}`} onClick={handleSpin}>\n          <span className=\"slot-text\">{selectedOption || 'Click to Spin'}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}